nom.media <- "media"
aux.media<-por_componente(data.clientes,sims=sims,auxj=auxj,id_bern=id_bern,nom.var=nom.var,
nom.media=nom.media,folio='Cliente')
##aux.media <- datos %>%
##left_join(id_bern %>%
## setNames(c(folio, "componente")), by = folio) %>%
##filter(!is.na(componente)) %>%
##dplyr::select(componente,contains(nom.var)) %>%
##group_by(componente) %>%
##mutate_(media = paste( "mean(" ,  as.name(nom.var)  ,")"  ),
##suma = paste( "sum(" ,  as.name(nom.var)  ,")"  ),
##diff = paste("(", as.name(nom.var)  ,"-",  as.name(nom.media), ")^2"  )) %>%
##summarise(med_tot = mean(media),
##suma_tot = mean(suma),
##diff_cuad = sum(diff)^2) ##esta es la suma por componente de (diferencia de xi-media del componente) ^2
sigma.sim<-posterior_sigma(auxj=auxj,aux.media=aux.media,param=param,mu0=mu0) ##se calcula la posterior de sigma
##sigma.sim <- auxj %>%
##left_join(aux.media, by = "componente") %>%
##left_join(param, by = "componente") %>%
##rowwise() %>%
##mutate(sigma_sim = rinvgamma(1, (vj + prop)/2,
## 0.5*( sj^2 + diff_cuad + (nj*prop*(med_tot - mu0)^2)/(nj + prop)))) %>%
## data.frame
mu.sim<-posterior_mu(sigma.sim=sigma.sim,mu0=mu0)
##mu.sim <- sigma.sim %>%##se calcula la posterior de mu
##rowwise() %>%
##mutate(mu_sim = rnorm(1, (nj*mu0 + prop*med_tot)/(nj + prop),
##sigma_sim/(nj + prop))) %>%
##data.frame()
pi.sim<-posterior_pi(mu.sim=mu.sim)
#pi.sim <- as.numeric(rdirichlet(1, mu.sim$prop/sum(mu.sim$prop)))##se calcula la nueva pi
param <- data.frame(componente = 1:k, ##se actualizan los valores de los parametros
mu_inicial = mu.sim$mu_sim,
sigma_inicial = mu.sim$sigma_sim,
pi = pi.sim,
nj = rep(1, k),
vj = rep(1, k),
sj = rep(1, k))
}
return(sims)
}
prueba_univar4 <- simulaciones2(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 2)
simulaciones2 <- function(datos, nom.var = names(datos), componente = 2,
folio = NULL, iteraciones = 1000){
k <- componente
param <- dist_inciales(datos, nom.var, k) ##devuelve los par?metros iniciales
sims <- NULL
sims_total <- NULL
col <- as.numeric(which(names(datos) %in% nom.var))
est <- estadisticos_iniciales(datos)
mu0 <- as.numeric(est[which(est$variable == nom.var), "media"]) #la media obtenida de los datos
n <- dim(datos)[1]
for(j in 1:iteraciones){
## primer for sirve para actualizar parÃ¡metros (mu y sigma) que se calculan con las distribuciones posteriores
print(j) ## imprime el n?mero de iteraci?n que ha transcurrido
for( i in 1:50){
## se calcula la variable latente para cada una de las Xi's
aux<-var_latente(data.clientes,nom.vars = nom.var,k=k,folio = 'Cliente',param= param,est=est,j,i)
sims <- rbind(aux, sims)
}
id_bern <- sims[ c("id", "componente")]
## se hace un filtrado por componente y se saca el numero de xiÂ´s que tiene cada uno
## y la media de cada uno
auxj<-en_componente(sims=sims,id_bern=id_bern)
##auxj <- sims %>%
##filter(sim_bern == 1) %>%
##mutate(n_tot = n()) %>%
##group_by(componente) %>%
##summarise(prop = n()) %>%
##ungroup()
nom.media <- "media"
aux.media<-por_componente(data.clientes,sims=sims,auxj=auxj,id_bern=id_bern,nom.var=nom.var,
nom.media=nom.media,folio='Cliente')
##aux.media <- datos %>%
##left_join(id_bern %>%
## setNames(c(folio, "componente")), by = folio) %>%
##filter(!is.na(componente)) %>%
##dplyr::select(componente,contains(nom.var)) %>%
##group_by(componente) %>%
##mutate_(media = paste( "mean(" ,  as.name(nom.var)  ,")"  ),
##suma = paste( "sum(" ,  as.name(nom.var)  ,")"  ),
##diff = paste("(", as.name(nom.var)  ,"-",  as.name(nom.media), ")^2"  )) %>%
##summarise(med_tot = mean(media),
##suma_tot = mean(suma),
##diff_cuad = sum(diff)^2) ##esta es la suma por componente de (diferencia de xi-media del componente) ^2
sigma.sim<-posterior_sigma(auxj=auxj,aux.media=aux.media,param=param,mu0=mu0) ##se calcula la posterior de sigma
##sigma.sim <- auxj %>%
##left_join(aux.media, by = "componente") %>%
##left_join(param, by = "componente") %>%
##rowwise() %>%
##mutate(sigma_sim = rinvgamma(1, (vj + prop)/2,
## 0.5*( sj^2 + diff_cuad + (nj*prop*(med_tot - mu0)^2)/(nj + prop)))) %>%
## data.frame
mu.sim<-posterior_mu(sigma.sim=sigma.sim,mu0=mu0)
##mu.sim <- sigma.sim %>%##se calcula la posterior de mu
##rowwise() %>%
##mutate(mu_sim = rnorm(1, (nj*mu0 + prop*med_tot)/(nj + prop),
##sigma_sim/(nj + prop))) %>%
##data.frame()
pi.sim<-posterior_pi(mu.sim=mu.sim)
#pi.sim <- as.numeric(rdirichlet(1, mu.sim$prop/sum(mu.sim$prop)))##se calcula la nueva pi
param <- data.frame(componente = 1:k, ##se actualizan los valores de los parametros
mu_inicial = mu.sim$mu_sim,
sigma_inicial = mu.sim$sigma_sim,
pi = pi.sim,
nj = rep(1, k),
vj = rep(1, k),
sj = rep(1, k))
}
return(sims)
}
prueba_univar4 <- simulaciones2(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 2)
prueba_univar4
simulaciones2 <- function(datos, nom.var = names(datos), componente = 2,
folio = NULL, iteraciones = 1000){
k <- componente
param <- dist_inciales(datos, nom.var, k) ##devuelve los par?metros iniciales
sims <- NULL
sims_total <- NULL
col <- as.numeric(which(names(datos) %in% nom.var))
est <- estadisticos_iniciales(datos)
mu0 <- as.numeric(est[which(est$variable == nom.var), "media"]) #la media obtenida de los datos
n <- dim(datos)[1]
for(j in 1:iteraciones){
## primer for sirve para actualizar parÃ¡metros (mu y sigma) que se calculan con las distribuciones posteriores
print(j) ## imprime el n?mero de iteraci?n que ha transcurrido
for( i in 1:20){
## se calcula la variable latente para cada una de las Xi's
aux<-var_latente(data.clientes,nom.vars = nom.var,k=k,folio = 'Cliente',param= param,est=est,j,i)
sims <- rbind(aux, sims)
}
id_bern <- sims[ c("id", "componente")]
## se hace un filtrado por componente y se saca el numero de xiÂ´s que tiene cada uno
## y la media de cada uno
auxj<-en_componente(sims=sims,id_bern=id_bern)
##auxj <- sims %>%
##filter(sim_bern == 1) %>%
##mutate(n_tot = n()) %>%
##group_by(componente) %>%
##summarise(prop = n()) %>%
##ungroup()
nom.media <- "media"
aux.media<-por_componente(data.clientes,sims=sims,auxj=auxj,id_bern=id_bern,nom.var=nom.var,
nom.media=nom.media,folio='Cliente')
##aux.media <- datos %>%
##left_join(id_bern %>%
## setNames(c(folio, "componente")), by = folio) %>%
##filter(!is.na(componente)) %>%
##dplyr::select(componente,contains(nom.var)) %>%
##group_by(componente) %>%
##mutate_(media = paste( "mean(" ,  as.name(nom.var)  ,")"  ),
##suma = paste( "sum(" ,  as.name(nom.var)  ,")"  ),
##diff = paste("(", as.name(nom.var)  ,"-",  as.name(nom.media), ")^2"  )) %>%
##summarise(med_tot = mean(media),
##suma_tot = mean(suma),
##diff_cuad = sum(diff)^2) ##esta es la suma por componente de (diferencia de xi-media del componente) ^2
sigma.sim<-posterior_sigma(auxj=auxj,aux.media=aux.media,param=param,mu0=mu0) ##se calcula la posterior de sigma
##sigma.sim <- auxj %>%
##left_join(aux.media, by = "componente") %>%
##left_join(param, by = "componente") %>%
##rowwise() %>%
##mutate(sigma_sim = rinvgamma(1, (vj + prop)/2,
## 0.5*( sj^2 + diff_cuad + (nj*prop*(med_tot - mu0)^2)/(nj + prop)))) %>%
## data.frame
mu.sim<-posterior_mu(sigma.sim=sigma.sim,mu0=mu0)
##mu.sim <- sigma.sim %>%##se calcula la posterior de mu
##rowwise() %>%
##mutate(mu_sim = rnorm(1, (nj*mu0 + prop*med_tot)/(nj + prop),
##sigma_sim/(nj + prop))) %>%
##data.frame()
pi.sim<-posterior_pi(mu.sim=mu.sim)
#pi.sim <- as.numeric(rdirichlet(1, mu.sim$prop/sum(mu.sim$prop)))##se calcula la nueva pi
param <- data.frame(componente = 1:k, ##se actualizan los valores de los parametros
mu_inicial = mu.sim$mu_sim,
sigma_inicial = mu.sim$sigma_sim,
pi = pi.sim,
nj = rep(1, k),
vj = rep(1, k),
sj = rep(1, k))
}
return(sims)
}
prueba_univar4 <- simulaciones2(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 2)
prueba_univar4
prueba_univar4 <- simulaciones2(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 2)
prueba_univar4
prueba_univar4 %>%
dplyr::select(sim, componente, pi) %>%
ggplot(aes(x = sim, y = pi, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar4 %>%
dplyr::select(sim, componente, pi) %>%
ggplot(aes(x = sim, y = pi, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar4 <- simulaciones2(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 20)
prueba_univar4 %>%
dplyr::select(sim, componente, pi) %>%
ggplot(aes(x = sim, y = pi, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar4 %>%
dplyr::select(sim, componente, mu_inicial) %>%
ggplot(aes(x = sim, y = mu_inicial, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar4 %>%
dplyr::select(sim, componente, delta) %>%
ggplot(aes(x = sim, y = delta, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
library(dplyr)
delta_cero <- filter(prueba_univar4,delta == 0)
delta_cero
simulaciones <- function(datos, nom.var = names(datos), componente = 2,
folio = NULL, iteraciones = 1000){
k <- componente
param <- dist_inciales(datos, nom.var, k) ##devuelve los par?metros iniciales
sims <- NULL
sims_total <- NULL
col <- as.numeric(which(names(datos) %in% nom.var))
est <- estadisticos_iniciales(datos)
mu0 <- as.numeric(est[which(est$variable == nom.var), "media"]) #la media obtenida de los datos
n <- dim(datos)[1]
for(j in 1:iteraciones){
## primer for sirve para actualizar parÃ¡metros (mu y sigma) que se calculan con las distribuciones posteriores
print(j) ## imprime el n?mero de iteraci?n que ha transcurrido
for( i in 1:20){
## se calcula la variable latente para cada una de las Xi's
aux<-var_latente(data.clientes,nom.vars = nom.var,k=k,folio = 'Cliente',param= param,est=est,j,i)
sims <- rbind(aux, sims)
}
id_bern <- sims[ c("id", "componente")]
## se hace un filtrado por componente y se saca el numero de xiÂ´s que tiene cada uno
## y la media de cada uno
auxj<-en_componente(sims=sims,id_bern=id_bern)
##auxj <- sims %>%
##filter(sim_bern == 1) %>%
##mutate(n_tot = n()) %>%
##group_by(componente) %>%
##summarise(prop = n()) %>%
##ungroup()
nom.media <- "media"
aux.media<-por_componente(data.clientes,sims=sims,auxj=auxj,id_bern=id_bern,nom.var=nom.var,
nom.media=nom.media,folio='Cliente')
##aux.media <- datos %>%
##left_join(id_bern %>%
## setNames(c(folio, "componente")), by = folio) %>%
##filter(!is.na(componente)) %>%
##dplyr::select(componente,contains(nom.var)) %>%
##group_by(componente) %>%
##mutate_(media = paste( "mean(" ,  as.name(nom.var)  ,")"  ),
##suma = paste( "sum(" ,  as.name(nom.var)  ,")"  ),
##diff = paste("(", as.name(nom.var)  ,"-",  as.name(nom.media), ")^2"  )) %>%
##summarise(med_tot = mean(media),
##suma_tot = mean(suma),
##diff_cuad = sum(diff)^2) ##esta es la suma por componente de (diferencia de xi-media del componente) ^2
sigma.sim<-posterior_sigma(auxj=auxj,aux.media=aux.media,param=param,mu0=mu0) ##se calcula la posterior de sigma
##sigma.sim <- auxj %>%
##left_join(aux.media, by = "componente") %>%
##left_join(param, by = "componente") %>%
##rowwise() %>%
##mutate(sigma_sim = rinvgamma(1, (vj + prop)/2,
## 0.5*( sj^2 + diff_cuad + (nj*prop*(med_tot - mu0)^2)/(nj + prop)))) %>%
## data.frame
mu.sim<-posterior_mu(sigma.sim=sigma.sim,mu0=mu0)
##mu.sim <- sigma.sim %>%##se calcula la posterior de mu
##rowwise() %>%
##mutate(mu_sim = rnorm(1, (nj*mu0 + prop*med_tot)/(nj + prop),
##sigma_sim/(nj + prop))) %>%
##data.frame()
pi.sim<-posterior_pi(mu.sim=mu.sim)
#pi.sim <- as.numeric(rdirichlet(1, mu.sim$prop/sum(mu.sim$prop)))##se calcula la nueva pi
param <- data.frame(componente = 1:k, ##se actualizan los valores de los parametros
mu_inicial = mu.sim$mu_sim,
sigma_inicial = mu.sim$sigma_sim,
pi = pi.sim,
nj = rep(1, k),
vj = rep(1, k),
sj = rep(1, k))
}
return(sims)
}
require("repmis")
require("tidyverse")
require("MCMCpack")
install.packages("repmis")
install.packages("tidyverse")
install.packages("repmis")
require("repmis")
require("tidyverse")
require("MCMCpack")
require("LCA")
rm(list=ls())
setwd("C:/JCMO.Trabajo/@Estudiantes/Montserrat Vizcayno/Tesis1/Gibbs Sampler/")
source("C:/Users/jmartineov/Documents/GitHub/Tesis1/Gibbs Sampler/funciones.R")
ls()
source("estadisticos_iniciales.R")
data.clientes <- read.csv('Clientes_17092105.csv',
stringsAsFactors = FALSE)
head(data.clientes)
glimpse(data.clientes)
require("tidyverse")
glimpse(data.clientes)
install.packages("dplyr")
install.packages("dplyr")
require("repmis")
require("tidyverse")
require("MCMCpack")
require("LCA")
head(data.clientes)
glimpse(data.clientes)
hiper.param <- estadisticos_iniciales(data.clientes)
param.iniciales <- dist_inciales(data.clientes, nom.var = "Creditos", componente = 2)
source("dist_inciales.R")
hiper.param <- estadisticos_iniciales(data.clientes)
param.iniciales <- dist_inciales(data.clientes, nom.var = "Creditos", componente = 2)
prueba_univar %>%
dplyr::select(sim, componente, pi) %>%
ggplot(aes(x = sim, y = pi, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
source("simulaciones")
source("simulaciones.R")
View(simulaciones)
datos <- datos
rm(list=ls())
require("repmis")
require("tidyverse")
require("MCMCpack")
require("LCA")
setwd("C:/JCMO.Trabajo/@Estudiantes/Montserrat Vizcayno/Tesis1/Gibbs Sampler/")
source("estadisticos_iniciales.R")
source("dist_inciales.R")
source("simulaciones.R")
data.clientes <- read.csv('Clientes_17092105.csv',
stringsAsFactors = FALSE)
head(data.clientes)
colnames(data.clientes)
datos <- data.clientes[,c("Empleados","Tasa_cero", "PYME")]
head(datos)
summary(datos)
datos <- data.clientes[,c("Saldo","Monto_prom", "Certificado")]
head(datos)
summary(datos)
nom.var <-  names(datos)  # nombre de las covariables
componente <- 2  # número de componentes
folio <- NULL
iteraciones <- 1000  # Longitud de la cadena de Markov
set.seed(9024)
k <- componente
param <- dist_inciales(datos, nom.var, k) ##devuelve los par?metros iniciales
sims <- NULL
sims_total <- NULL
col <- as.numeric(which(names(datos) %in% nom.var))
est <- estadisticos_iniciales(datos)
mu0 <- as.numeric(est[which(est$variable == nom.var), "media"]) #la media obtenida de los datos
col <- as.numeric(which(names(datos) %in% nom.var))
mu0 <- as.numeric(est[which(est$variable == nom.var), "media"]) #la media obtenida de los datos
rm(list=ls())
require("repmis")
require("tidyverse")
require("MCMCpack")
install.packages("tidyverse")
datos <- data.clientes[,c("Saldo","Monto_prom", "Certificado")]
install.packages("medicar")
install.packages("medicare")
require("LCA")
source('simulaciones.R')
source('dist_inciales.R')
source('estadisticos_iniciales.R')
source('var_latente.R')
source('en_componente.R')
source('por_componente.R')
source('posterior_sigma.R')
source('posterior_mu.R')
source('posterior_pi.R')
data.clientes <- read.csv('Clientes_17092105.csv',
stringsAsFactors = FALSE)
head(data.clientes)
glimpse(data.clientes)
hiper.param
hiper.param <- estadisticos_iniciales(data.clientes)
param.iniciales <- dist_inciales(data.clientes, nom.var = "Creditos", componente = 2)
prueba_univar <- simulaciones(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 2)
prueba_univar %>%
dplyr::select(sim, componente, pi) %>%
ggplot(aes(x = sim, y = pi, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar4 <- simulaciones(datos = data.clientes, nom.var = 'Creditos', componente = 2,
folio = 'Cliente', iteraciones = 2)
filtrados <- prueba_univar[which(prueba_univar$sim_bern == 1), c("id", "componente")]
filtrados
prueba_univar4 %>%
dplyr::select(sim, componente, pi) %>%
ggplot(aes(x = sim, y = pi, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar4 %>%
dplyr::select(sim, componente, mu_inicial) %>%
ggplot(aes(x = sim, y = mu_inicial, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
prueba_univar %>%
dplyr::select(sim, componente, delta) %>%
ggplot(aes(x = sim, y = delta, group = as.factor(componente), colour = as.factor(componente))) +
geom_point() +
geom_line()
library(dplyr)
delta_cero <- filter(prueba_univar,delta == 0)
delta_cero
rm(list=ls())
require("repmis")
require("tidyverse")
require("MCMCpack")
require("LCA")
setwd("C:/JCMO.Trabajo/@Estudiantes/Montserrat Vizcayno/Tesis1/Gibbs Sampler/")
source("estadisticos_iniciales.R")
source("dist_inciales.R")
source("simulaciones.R")
data.clientes <- read.csv('Clientes_17092105.csv',
stringsAsFactors = FALSE)
head(data.clientes)
glimpse(data.clientes)
hiper.param <- estadisticos_iniciales(data.clientes)
param.iniciales <- dist_inciales(data.clientes, nom.var = "Creditos", componente = 2)
datos <- data.clientes[,c("Saldo","Monto_prom", "Certificado")]
head(datos)
summary(datos)
nom.var <-  names(datos)  # nombre de las covariables
componente <- 2  # número de componentes
folio <- NULL
iteraciones <- 1000  # Longitud de la cadena de Markov
set.seed(9024)
iteraciones <- 10  # Longitud de la cadena de Markov
set.seed(9024)
simulaciones(datos, nom.var, componente, folio, iteraciones)
rm(list=ls())
require("repmis")
require("tidyverse")
require("MCMCpack")
require("LCA")
setwd("C:/JCMO.Trabajo/@Estudiantes/Montserrat Vizcayno/Tesis1/Gibbs Sampler/")
source("dist_inciales.R")
source("en_componente")
source("por_componente")
source("posterior_mu")
source("posterior_pi")
setwd("C:/JCMO.Trabajo/@Estudiantes/Montserrat Vizcayno/Tesis1/Gibbs Sampler/")
source("dist_inciales.R")
source("en_componente.R")
source("por_componente.R")
source("posterior_mu.R")
source("posterior_pi.R")
#
#   Tesis: Montserrat
#   -- 2016-dic-13 --
#
rm(list=ls())
#install.packages("repmis")
#install.packages("tidyverse")
#install.packages("MCMCpack")
#install.packages("LCA")
require("repmis")
require("tidyverse")
require("MCMCpack")
require("LCA")
setwd("C:/JCMO.Trabajo/@Estudiantes/Montserrat Vizcayno/Tesis1/Gibbs Sampler/")
source("dist_inciales.R")
source("en_componente.R")
source("en_componente.R")
source("por_componente.R")
View(por_componente)
View(por_componente)
source("por_componente.R")
source("posterior_mu.R")
View(posterior_mu)
View(posterior_mu)
source("posterior_mu.R")
source("posterior_pi.R")
View(posterior_pi)
View(posterior_pi)
source("var_latente.R")
View(var_latente)
View(var_latente)
source("var_latente.R")
source("var_latente.R")
source("estadisticos_iniciales.R")
source("simulaciones.R")
data.clientes <- read.csv('Clientes_17092105.csv',
stringsAsFactors = FALSE)
head(data.clientes)
glimpse(data.clientes)
hiper.param <- estadisticos_iniciales(data.clientes)
param.iniciales <- dist_inciales(data.clientes, nom.var = "Creditos", componente = 2)
datos <- data.clientes[,c("Saldo","Monto_prom", "Certificado")]
head(datos)
summary(datos)
nom.var <-  names(datos)  # nombre de las covariables
componente <- 2  # número de componentes
folio <- NULL
iteraciones <- 10  # Longitud de la cadena de Markov
set.seed(9024)
simulaciones(datos, nom.var, componente, folio, iteraciones)
